package xyz.quazaros;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.*;
import java.util.*;

public class file {
    data Data = new data();

    public List<String> file_list;
    public List<String> mob_file_list;

    private final File file_data;
    private final File file_mobs;
    private final File file_player;
    private final File file_config;
    private final File file_lists;
    private final File mob_file_lists;
    private final File file_normal;
    private final File file_alphabetical;
    private final File file_all;
    private final File file_normal_mobs;

    private final String path_pre;

    public file() {
        path_pre = xyz.quazaros.main.getPlugin().getDataFolder().getAbsolutePath();
        file_data = new File(path_pre + "/items.json");
        file_mobs = new File(path_pre + "/mobs.json");
        file_player = new File(path_pre + "/players.txt");
        file_config = new File(path_pre + "/config.txt");

        file_lists = new File(path_pre + "/Lists");
        mob_file_lists = new File(path_pre + "/MobLists");
        file_normal = new File(path_pre + "/Lists/normal.txt");
        file_alphabetical = new File(path_pre + "/Lists/alphabetical.txt");
        file_all = new File(path_pre + "/Lists/all.txt");
        file_normal_mobs = new File(path_pre + "/MobLists/normal.txt");
    }

    //Gets data upon starting the server
    public void get_data() throws IOException {
        if (file_config.exists()) {
            Scanner myScanner = new Scanner(file_config);
            String temp;
            temp = myScanner.nextLine();
            Data.file_name = myScanner.nextLine();
            temp = myScanner.nextLine();
            temp = myScanner.nextLine();
            Data.mob_file_name = myScanner.nextLine();
            temp = myScanner.nextLine();
            temp = myScanner.nextLine();
            temp = myScanner.nextLine();
            if (temp.equalsIgnoreCase("true")) {Data.sub_item = true;} else {Data.sub_item = false;}
            temp = myScanner.nextLine();
            temp = myScanner.nextLine();
            temp = myScanner.nextLine();
            if (temp.equalsIgnoreCase("true")) {Data.auto_collect = true;} else {Data.auto_collect = false;}
            temp = myScanner.nextLine();
            temp = myScanner.nextLine();
            temp = myScanner.nextLine();
            if (temp.equalsIgnoreCase("enabled")) {Data.toggle_items = true;} else {Data.toggle_items = false;}
            temp = myScanner.nextLine();
            temp = myScanner.nextLine();
            temp = myScanner.nextLine();
            if (temp.equalsIgnoreCase("enabled")) {Data.toggle_mobs = true;} else {Data.toggle_mobs = false;}

            Data.item_string_list = get_item_from_list(Data.file_name, false);
            Data.mob_string_list = get_item_from_list(Data.mob_file_name, true);
        } else {
            Data.item_string_list = get_item_from_list("normal", false);
            Data.mob_string_list = get_item_from_list("normal", true);
        }

        Data.total_items.indexes = Data.total_items.string_to_index(Data.item_string_list);
        Data.total_mobs.indexes = Data.total_mobs.string_to_index(Data.mob_string_list);

        Gson gson = new GsonBuilder().setLenient().create();
        Reader myReader;
        if (file_data.exists()) {
            myReader = new FileReader(file_data);
            itemData[] temp = gson.fromJson(myReader, itemData[].class);
            for (int i=0; i<Data.total_items.items.size(); i++) {
                if (temp[i].name.equals(Data.total_items.items.get(i).item_name)) {
                    Data.total_items.items.get(i).item_data = temp[i];
                    if (Data.total_items.items.get(i).item_data.is_found) {
                        Data.total_items.items.get(i).submit(temp[i].player, temp[i].date);
                    }
                }
                else {
                    for (int j=0; j<Data.total_items.items.size(); j++) {
                        if (temp[i].name.equals(Data.total_items.items.get(j).item_name)) {
                            Data.total_items.items.get(j).item_data = temp[i];
                            if (Data.total_items.items.get(j).item_data.is_found) {
                                Data.total_items.items.get(j).submit(temp[i].player, temp[i].date);
                            }
                        }
                    }
                }
            }
            myReader.close();
        }

        if (file_mobs.exists()) {
            myReader = new FileReader(file_mobs);
            itemData[] temp = gson.fromJson(myReader, itemData[].class);
            for (int i=0; i<Data.total_mobs.items.size(); i++) {
                if (temp[i].name.equals(Data.total_mobs.items.get(i).item_name)) {
                    Data.total_mobs.items.get(i).item_data = temp[i];
                    if (Data.total_mobs.items.get(i).item_data.is_found) {
                        Data.total_mobs.items.get(i).submit(temp[i].player, temp[i].date);
                    }
                }
                else {
                    for (int j=0; j<Data.total_mobs.items.size(); j++) {
                        if (temp[i].name.equals(Data.total_mobs.items.get(j).item_name)) {
                            Data.total_mobs.items.get(j).item_data = temp[i];
                            if (Data.total_mobs.items.get(j).item_data.is_found) {
                                Data.total_mobs.items.get(j).submit(temp[i].player, temp[i].date);
                            }
                        }
                    }
                }
            }
        }

        if (file_player.exists()) {
            Scanner myScanner = new Scanner(file_player);
            while (myScanner.hasNextLine()) {
                Data.player_list.players.add(new player(myScanner.nextLine()));
            }
        }

        Data.player_list.initialize_score(Data.total_items, false);
        Data.player_list.initialize_score(Data.total_mobs, true);

        //Sets up the default "list" files
        file_normal.getParentFile().mkdirs();

        if (!file_normal.exists()) {
            file_normal.createNewFile();
            Writer myWriter = new FileWriter(file_normal, false);
            for (int i = 0; i < Data.normal.size(); i++) {
                myWriter.write(Data.normal.get(i)+"\n");
            }
            myWriter.close();
        }
        if (!file_alphabetical.exists()) {
            file_alphabetical.createNewFile();
            Writer myWriter = new FileWriter(file_alphabetical, false);
            for (String i : Data.alphabetical) {
                myWriter.write(i+"\n");
            }
            myWriter.close();
        }
        if (!file_all.exists()) {
            file_all.createNewFile();
            Writer myWriter = new FileWriter(file_all, false);
            for (String i : Data.all) {
                myWriter.write(i+"\n");
            }
            myWriter.close();
        }

        file_normal_mobs.getParentFile().mkdirs();

        if (!file_normal_mobs.exists()) {
            file_normal_mobs.createNewFile();
            Writer myWriter = new FileWriter(file_normal_mobs, false);
            for (String i : Data.normal_mobs) {
                myWriter.write(i+"\n");
            }
            myWriter.close();
        }

        file_list = remove_txt(Arrays.asList(file_lists.list()));
        mob_file_list = remove_txt(Arrays.asList(mob_file_lists.list()));
    }

    //Sends the data to files upon closing the server and periodically saving
    public void send_data(itemList items, itemList mobs, playerList players) throws IOException {
        ArrayList<itemData> item_data_list = new ArrayList<>();
        Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
        Writer myWriter;
        if (!Data.reset) {
            file_data.createNewFile();
            myWriter = new FileWriter(file_data, false);
            for (item i : items.items) {
                item_data_list.add(i.item_data);
            }
            gson.toJson(item_data_list, item_data_list.getClass(), myWriter);
            myWriter.flush();
            myWriter.close();
        } else {
            for (int i=0; i<players.players.size(); i++) {
                players.players.get(i).score = 0;
            }
            if (file_data.exists()) {
                file_data.delete();
            }
        }

        item_data_list.clear();
        if (!Data.mob_reset) {
            file_mobs.createNewFile();
            myWriter = new FileWriter(file_mobs, false);
            for (item i : mobs.items) {
                item_data_list.add(i.item_data);
            }
            gson.toJson(item_data_list, item_data_list.getClass(), myWriter);
            myWriter.flush();
            myWriter.close();
        } else {
            for (int i=0; i<players.players.size(); i++) {
                players.players.get(i).mobScore = 0;
            }
            if (file_mobs.exists()) {
                file_mobs.delete();
            }
        }

        file_player.createNewFile();
        myWriter = new FileWriter(file_player, false);
        for (player p : players.players) {
            myWriter.write(p.name+"\n");
        }
        myWriter.close();

        file_config.createNewFile();
        myWriter = new FileWriter(file_config, false);
        myWriter.write("Item File Name:\n");
        myWriter.write(Data.file_name + "\n\n");
        myWriter.write("Mob File Name:\n");
        myWriter.write(Data.mob_file_name + "\n\n");
        myWriter.write("Subtraction:\n");
        myWriter.write((Data.sub_item ? "True" : "False") + "\n\n");
        myWriter.write("Auto Collect:\n");
        myWriter.write((Data.auto_collect ? "True" : "False") + "\n\n");
        myWriter.write("Items Toggle:\n");
        myWriter.write((Data.toggle_items ? "Enabled" : "Disabled") + "\n\n");
        myWriter.write("Mobs Toggle:\n");
        myWriter.write((Data.toggle_mobs ? "Enabled" : "Disabled") + "\n\n");
        myWriter.close();
    }

    //Gets the list of items (strings) from a file
    private ArrayList<String> get_item_from_list(String str, boolean is_mob) throws IOException {
        File file_itemlist;
        if (!is_mob) {
            file_itemlist = new File(path_pre + "/Lists/" + str + ".txt");
        } else {
            file_itemlist = new File(path_pre + "/MobLists/" + str + ".txt");
        }
        ArrayList<String> temp = new ArrayList<>();
        if (file_itemlist.exists()) {
            Scanner myReader = new Scanner(file_itemlist);
            while (myReader.hasNextLine()) {
                temp.add(myReader.nextLine());
            }
        } else {
            if (!is_mob) {
                temp = Data.normal;
            } else {
                temp = Data.normal_mobs;
            }
        }
        return temp;
    }

    //Removes the .txt extension from each string in a list
    private List<String> remove_txt(List<String> list) {
        List<String> temp = new ArrayList<>();
        for (int i = 0; i < list.size(); i++) {
            temp.add(list.get(i).substring(0, list.get(i).length() - 4));
        }
        return temp;
    }
}

class data {
    ArrayList<String> item_string_list;
    ArrayList<String> mob_string_list;
    itemList total_items;
    itemList total_mobs;
    playerList player_list;

    String file_name;
    String mob_file_name;
    boolean reset;
    boolean mob_reset;
    boolean sub_item;
    boolean auto_collect;
    boolean toggle_items;
    boolean toggle_mobs;

    ArrayList<String> normal;
    ArrayList<String> alphabetical;
    ArrayList<String> all;
    ArrayList<String> normal_mobs;

    public data() {
        item_string_list = new ArrayList<>();
        total_items = new itemList();
        total_mobs = new itemList();
        total_items.total();
        total_mobs.total_mobs();
        player_list = new playerList();

        normal = new ArrayList<>();
        alphabetical = new ArrayList<>();
        all = new ArrayList<>();
        normal_mobs = new ArrayList<>();

        file_name = "normal";
        mob_file_name = "normal";
        reset = false;
        sub_item = false;
        auto_collect = false;
        toggle_items = true;
        toggle_mobs = true;

        normal_func();
        alphabetical_func();
        all_func();
        normal_mobs_func();
    }

    private void alphabetical_func() {
        for (String s : normal) {
            alphabetical.add(s);
        }
        Collections.sort(alphabetical);
    }

    private void all_func() {
        for (item i : total_items.items) {
            all.add(i.item_name);
        }
    }

    private void normal_func() {
        normal.add("oak_log");
        normal.add("oak_wood");
        normal.add("stripped_oak_log");
        normal.add("stripped_oak_wood");
        normal.add("oak_planks");
        normal.add("oak_stairs");
        normal.add("oak_slab");
        normal.add("oak_door");
        normal.add("oak_trapdoor");
        normal.add("oak_fence");
        normal.add("oak_fence_gate");
        normal.add("oak_sign");
        normal.add("oak_hanging_sign");
        normal.add("oak_button");
        normal.add("oak_pressure_plate");
        normal.add("oak_boat");
        normal.add("oak_chest_boat");
        normal.add("oak_leaves");
        normal.add("azalea_leaves");
        normal.add("flowering_azalea_leaves");
        normal.add("oak_sapling");
        normal.add("birch_log");
        normal.add("birch_wood");
        normal.add("stripped_birch_log");
        normal.add("stripped_birch_wood");
        normal.add("birch_planks");
        normal.add("birch_stairs");
        normal.add("birch_slab");
        normal.add("birch_door");
        normal.add("birch_trapdoor");
        normal.add("birch_fence");
        normal.add("birch_fence_gate");
        normal.add("birch_sign");
        normal.add("birch_hanging_sign");
        normal.add("birch_button");
        normal.add("birch_pressure_plate");
        normal.add("birch_boat");
        normal.add("birch_chest_boat");
        normal.add("birch_leaves");
        normal.add("birch_sapling");
        normal.add("spruce_log");
        normal.add("spruce_wood");
        normal.add("stripped_spruce_log");
        normal.add("stripped_spruce_wood");
        normal.add("spruce_planks");
        normal.add("spruce_stairs");
        normal.add("spruce_slab");
        normal.add("spruce_door");
        normal.add("spruce_trapdoor");
        normal.add("spruce_fence");
        normal.add("spruce_fence_gate");
        normal.add("spruce_sign");
        normal.add("spruce_hanging_sign");
        normal.add("spruce_button");
        normal.add("spruce_pressure_plate");
        normal.add("spruce_boat");
        normal.add("spruce_chest_boat");
        normal.add("spruce_leaves");
        normal.add("spruce_sapling");
        normal.add("acacia_log");
        normal.add("acacia_wood");
        normal.add("stripped_acacia_log");
        normal.add("stripped_acacia_wood");
        normal.add("acacia_planks");
        normal.add("acacia_stairs");
        normal.add("acacia_slab");
        normal.add("acacia_door");
        normal.add("acacia_trapdoor");
        normal.add("acacia_fence");
        normal.add("acacia_fence_gate");
        normal.add("acacia_sign");
        normal.add("acacia_hanging_sign");
        normal.add("acacia_button");
        normal.add("acacia_pressure_plate");
        normal.add("acacia_boat");
        normal.add("acacia_chest_boat");
        normal.add("acacia_leaves");
        normal.add("acacia_sapling");
        normal.add("jungle_log");
        normal.add("jungle_wood");
        normal.add("stripped_jungle_log");
        normal.add("stripped_jungle_wood");
        normal.add("jungle_planks");
        normal.add("jungle_stairs");
        normal.add("jungle_slab");
        normal.add("jungle_door");
        normal.add("jungle_trapdoor");
        normal.add("jungle_fence");
        normal.add("jungle_fence_gate");
        normal.add("jungle_sign");
        normal.add("jungle_hanging_sign");
        normal.add("jungle_button");
        normal.add("jungle_pressure_plate");
        normal.add("jungle_boat");
        normal.add("jungle_chest_boat");
        normal.add("jungle_leaves");
        normal.add("jungle_sapling");
        normal.add("dark_oak_log");
        normal.add("dark_oak_wood");
        normal.add("stripped_dark_oak_log");
        normal.add("stripped_dark_oak_wood");
        normal.add("dark_oak_planks");
        normal.add("dark_oak_stairs");
        normal.add("dark_oak_slab");
        normal.add("dark_oak_door");
        normal.add("dark_oak_trapdoor");
        normal.add("dark_oak_fence");
        normal.add("dark_oak_fence_gate");
        normal.add("dark_oak_sign");
        normal.add("dark_oak_hanging_sign");
        normal.add("dark_oak_button");
        normal.add("dark_oak_pressure_plate");
        normal.add("dark_oak_boat");
        normal.add("dark_oak_chest_boat");
        normal.add("dark_oak_leaves");
        normal.add("dark_oak_sapling");
        normal.add("mangrove_log");
        normal.add("mangrove_wood");
        normal.add("stripped_mangrove_log");
        normal.add("stripped_mangrove_wood");
        normal.add("mangrove_planks");
        normal.add("mangrove_stairs");
        normal.add("mangrove_slab");
        normal.add("mangrove_door");
        normal.add("mangrove_trapdoor");
        normal.add("mangrove_fence");
        normal.add("mangrove_fence_gate");
        normal.add("mangrove_sign");
        normal.add("mangrove_hanging_sign");
        normal.add("mangrove_button");
        normal.add("mangrove_pressure_plate");
        normal.add("mangrove_boat");
        normal.add("mangrove_chest_boat");
        normal.add("mangrove_leaves");
        normal.add("mangrove_roots");
        normal.add("muddy_mangrove_roots");
        normal.add("mangrove_propagule");
        normal.add("cherry_log");
        normal.add("cherry_wood");
        normal.add("stripped_cherry_log");
        normal.add("stripped_cherry_wood");
        normal.add("cherry_planks");
        normal.add("cherry_stairs");
        normal.add("cherry_slab");
        normal.add("cherry_door");
        normal.add("cherry_trapdoor");
        normal.add("cherry_fence");
        normal.add("cherry_fence_gate");
        normal.add("cherry_sign");
        normal.add("cherry_hanging_sign");
        normal.add("cherry_button");
        normal.add("cherry_pressure_plate");
        normal.add("cherry_boat");
        normal.add("cherry_chest_boat");
        normal.add("cherry_leaves");
        normal.add("cherry_sapling");
        normal.add("pale_oak_log");
        normal.add("pale_oak_wood");
        normal.add("stripped_pale_oak_log");
        normal.add("stripped_pale_oak_wood");
        normal.add("pale_oak_planks");
        normal.add("pale_oak_stairs");
        normal.add("pale_oak_slab");
        normal.add("pale_oak_door");
        normal.add("pale_oak_trapdoor");
        normal.add("pale_oak_fence");
        normal.add("pale_oak_fence_gate");
        normal.add("pale_oak_sign");
        normal.add("pale_oak_hanging_sign");
        normal.add("pale_oak_button");
        normal.add("pale_oak_pressure_plate");
        normal.add("pale_oak_boat");
        normal.add("pale_oak_chest_boat");
        normal.add("pale_oak_leaves");
        normal.add("pale_oak_sapling");
        normal.add("bamboo_block");
        normal.add("stripped_bamboo_block");
        normal.add("bamboo_planks");
        normal.add("bamboo_stairs");
        normal.add("bamboo_slab");
        normal.add("bamboo_mosaic");
        normal.add("bamboo_mosaic_stairs");
        normal.add("bamboo_mosaic_slab");
        normal.add("bamboo_door");
        normal.add("bamboo_trapdoor");
        normal.add("bamboo_fence");
        normal.add("bamboo_fence_gate");
        normal.add("bamboo_sign");
        normal.add("bamboo_hanging_sign");
        normal.add("bamboo_button");
        normal.add("bamboo_pressure_plate");
        normal.add("bamboo_raft");
        normal.add("bamboo_chest_raft");
        normal.add("crimson_stem");
        normal.add("crimson_hyphae");
        normal.add("stripped_crimson_stem");
        normal.add("stripped_crimson_hyphae");
        normal.add("crimson_planks");
        normal.add("crimson_stairs");
        normal.add("crimson_slab");
        normal.add("crimson_door");
        normal.add("crimson_trapdoor");
        normal.add("crimson_fence");
        normal.add("crimson_fence_gate");
        normal.add("crimson_sign");
        normal.add("crimson_hanging_sign");
        normal.add("crimson_button");
        normal.add("crimson_pressure_plate");
        normal.add("nether_wart_block");
        normal.add("crimson_fungus");
        normal.add("warped_stem");
        normal.add("warped_hyphae");
        normal.add("stripped_warped_stem");
        normal.add("stripped_warped_hyphae");
        normal.add("warped_planks");
        normal.add("warped_stairs");
        normal.add("warped_slab");
        normal.add("warped_door");
        normal.add("warped_trapdoor");
        normal.add("warped_fence");
        normal.add("warped_fence_gate");
        normal.add("warped_sign");
        normal.add("warped_hanging_sign");
        normal.add("warped_button");
        normal.add("warped_pressure_plate");
        normal.add("warped_wart_block");
        normal.add("warped_fungus");
        normal.add("stone");
        normal.add("stone_stairs");
        normal.add("stone_slab");
        normal.add("stone_pressure_plate");
        normal.add("stone_button");
        normal.add("cobblestone");
        normal.add("cobblestone_stairs");
        normal.add("cobblestone_slab");
        normal.add("cobblestone_wall");
        normal.add("mossy_cobblestone");
        normal.add("mossy_cobblestone_stairs");
        normal.add("mossy_cobblestone_slab");
        normal.add("mossy_cobblestone_wall");
        normal.add("smooth_stone");
        normal.add("smooth_stone_slab");
        normal.add("stone_bricks");
        normal.add("chiseled_stone_bricks");
        normal.add("cracked_stone_bricks");
        normal.add("stone_brick_stairs");
        normal.add("stone_brick_slab");
        normal.add("stone_brick_wall");
        normal.add("mossy_stone_bricks");
        normal.add("mossy_stone_brick_stairs");
        normal.add("mossy_stone_brick_slab");
        normal.add("mossy_stone_brick_wall");
        normal.add("granite");
        normal.add("granite_stairs");
        normal.add("granite_slab");
        normal.add("granite_wall");
        normal.add("polished_granite");
        normal.add("polished_granite_stairs");
        normal.add("polished_granite_slab");
        normal.add("diorite");
        normal.add("diorite_stairs");
        normal.add("diorite_slab");
        normal.add("diorite_wall");
        normal.add("polished_diorite");
        normal.add("polished_diorite_stairs");
        normal.add("polished_diorite_slab");
        normal.add("andesite");
        normal.add("andesite_stairs");
        normal.add("andesite_slab");
        normal.add("andesite_wall");
        normal.add("polished_andesite");
        normal.add("polished_andesite_stairs");
        normal.add("polished_andesite_slab");
        normal.add("deepslate");
        normal.add("cobbled_deepslate");
        normal.add("cobbled_deepslate_stairs");
        normal.add("cobbled_deepslate_slab");
        normal.add("cobbled_deepslate_wall");
        normal.add("chiseled_deepslate");
        normal.add("polished_deepslate");
        normal.add("polished_deepslate_stairs");
        normal.add("polished_deepslate_slab");
        normal.add("polished_deepslate_wall");
        normal.add("deepslate_bricks");
        normal.add("cracked_deepslate_bricks");
        normal.add("deepslate_brick_stairs");
        normal.add("deepslate_brick_slab");
        normal.add("deepslate_brick_wall");
        normal.add("deepslate_tiles");
        normal.add("cracked_deepslate_tiles");
        normal.add("deepslate_tile_stairs");
        normal.add("deepslate_tile_slab");
        normal.add("deepslate_tile_wall");
        normal.add("tuff");
        normal.add("tuff_stairs");
        normal.add("tuff_slab");
        normal.add("tuff_wall");
        normal.add("chiseled_tuff");
        normal.add("polished_tuff");
        normal.add("polished_tuff_stairs");
        normal.add("polished_tuff_slab");
        normal.add("polished_tuff_wall");
        normal.add("tuff_bricks");
        normal.add("chiseled_tuff_bricks");
        normal.add("tuff_brick_stairs");
        normal.add("tuff_brick_slab");
        normal.add("tuff_brick_wall");
        normal.add("bricks");
        normal.add("brick_stairs");
        normal.add("brick_slab");
        normal.add("brick_wall");
        normal.add("packed_mud");
        normal.add("mud_bricks");
        normal.add("mud_brick_stairs");
        normal.add("mud_brick_slab");
        normal.add("mud_brick_wall");
        normal.add("resin_block");
        normal.add("resin_bricks");
        normal.add("resin_brick_stairs");
        normal.add("resin_brick_slab");
        normal.add("resin_brick_wall");
        normal.add("chiseled_resin_bricks");
        normal.add("sandstone");
        normal.add("sandstone_stairs");
        normal.add("sandstone_slab");
        normal.add("sandstone_wall");
        normal.add("smooth_sandstone");
        normal.add("smooth_sandstone_stairs");
        normal.add("smooth_sandstone_slab");
        normal.add("cut_sandstone");
        normal.add("cut_sandstone_slab");
        normal.add("chiseled_sandstone");
        normal.add("red_sandstone");
        normal.add("red_sandstone_stairs");
        normal.add("red_sandstone_slab");
        normal.add("red_sandstone_wall");
        normal.add("smooth_red_sandstone");
        normal.add("smooth_red_sandstone_stairs");
        normal.add("smooth_red_sandstone_slab");
        normal.add("cut_red_sandstone");
        normal.add("cut_red_sandstone_slab");
        normal.add("chiseled_red_sandstone");
        normal.add("prismarine");
        normal.add("prismarine_stairs");
        normal.add("prismarine_slab");
        normal.add("prismarine_wall");
        normal.add("prismarine_bricks");
        normal.add("prismarine_brick_stairs");
        normal.add("prismarine_brick_slab");
        normal.add("dark_prismarine");
        normal.add("dark_prismarine_stairs");
        normal.add("dark_prismarine_slab");
        normal.add("nether_bricks");
        normal.add("nether_brick_stairs");
        normal.add("nether_brick_slab");
        normal.add("nether_brick_wall");
        normal.add("nether_brick_fence");
        normal.add("red_nether_bricks");
        normal.add("red_nether_brick_stairs");
        normal.add("red_nether_brick_slab");
        normal.add("red_nether_brick_wall");
        normal.add("basalt");
        normal.add("smooth_basalt");
        normal.add("polished_basalt");
        normal.add("blackstone");
        normal.add("gilded_blackstone");
        normal.add("blackstone_stairs");
        normal.add("blackstone_slab");
        normal.add("blackstone_wall");
        normal.add("polished_blackstone");
        normal.add("chiseled_polished_blackstone");
        normal.add("polished_blackstone_stairs");
        normal.add("polished_blackstone_slab");
        normal.add("polished_blackstone_wall");
        normal.add("polished_blackstone_button");
        normal.add("polished_blackstone_pressure_plate");
        normal.add("polished_blackstone_bricks");
        normal.add("cracked_polished_blackstone_bricks");
        normal.add("polished_blackstone_brick_stairs");
        normal.add("polished_blackstone_brick_slab");
        normal.add("polished_blackstone_brick_wall");
        normal.add("end_stone");
        normal.add("end_stone_brick_slab");
        normal.add("end_stone_brick_stairs");
        normal.add("end_stone_brick_wall");
        normal.add("end_stone_bricks");
        normal.add("purpur_block");
        normal.add("purpur_pillar");
        normal.add("purpur_stairs");
        normal.add("purpur_slab");
        normal.add("quartz_block");
        normal.add("quartz_bricks");
        normal.add("quartz_pillar");
        normal.add("quartz_stairs");
        normal.add("quartz_slab");
        normal.add("smooth_quartz");
        normal.add("smooth_quartz_stairs");
        normal.add("smooth_quartz_slab");
        normal.add("chiseled_quartz_block");
        normal.add("iron_door");
        normal.add("iron_trapdoor");
        normal.add("heavy_weighted_pressure_plate");
        normal.add("iron_bars");
        normal.add("chain");
        normal.add("light_weighted_pressure_plate");
        normal.add("coal_ore");
        normal.add("deepslate_coal_ore");
        normal.add("iron_ore");
        normal.add("deepslate_iron_ore");
        normal.add("copper_ore");
        normal.add("deepslate_copper_ore");
        normal.add("gold_ore");
        normal.add("deepslate_gold_ore");
        normal.add("diamond_ore");
        normal.add("deepslate_diamond_ore");
        normal.add("emerald_ore");
        normal.add("deepslate_emerald_ore");
        normal.add("redstone_ore");
        normal.add("deepslate_redstone_ore");
        normal.add("lapis_ore");
        normal.add("deepslate_lapis_ore");
        normal.add("raw_iron_block");
        normal.add("raw_copper_block");
        normal.add("nether_quartz_ore");
        normal.add("nether_gold_ore");
        normal.add("ancient_debris");
        normal.add("coal_block");
        normal.add("iron_block");
        normal.add("gold_block");
        normal.add("diamond_block");
        normal.add("emerald_block");
        normal.add("redstone_block");
        normal.add("lapis_block");
        normal.add("netherite_block");
        normal.add("copper_block");
        normal.add("chiseled_copper");
        normal.add("copper_grate");
        normal.add("cut_copper");
        normal.add("cut_copper_stairs");
        normal.add("cut_copper_slab");
        normal.add("copper_bulb");
        normal.add("copper_door");
        normal.add("copper_trapdoor");
        normal.add("exposed_copper");
        normal.add("exposed_chiseled_copper");
        normal.add("exposed_copper_grate");
        normal.add("exposed_cut_copper");
        normal.add("exposed_cut_copper_stairs");
        normal.add("exposed_cut_copper_slab");
        normal.add("exposed_copper_bulb");
        normal.add("exposed_copper_door");
        normal.add("exposed_copper_trapdoor");
        normal.add("weathered_copper");
        normal.add("weathered_chiseled_copper");
        normal.add("weathered_copper_grate");
        normal.add("weathered_cut_copper");
        normal.add("weathered_cut_copper_stairs");
        normal.add("weathered_cut_copper_slab");
        normal.add("weathered_copper_bulb");
        normal.add("weathered_copper_door");
        normal.add("weathered_copper_trapdoor");
        normal.add("oxidized_copper");
        normal.add("oxidized_chiseled_copper");
        normal.add("oxidized_copper_grate");
        normal.add("oxidized_cut_copper");
        normal.add("oxidized_cut_copper_stairs");
        normal.add("oxidized_cut_copper_slab");
        normal.add("oxidized_copper_bulb");
        normal.add("oxidized_copper_door");
        normal.add("oxidized_copper_trapdoor");
        normal.add("waxed_copper_block");
        normal.add("waxed_chiseled_copper");
        normal.add("waxed_copper_grate");
        normal.add("waxed_cut_copper");
        normal.add("waxed_cut_copper_stairs");
        normal.add("waxed_cut_copper_slab");
        normal.add("waxed_copper_bulb");
        normal.add("waxed_copper_door");
        normal.add("waxed_copper_trapdoor");
        normal.add("waxed_exposed_copper");
        normal.add("waxed_exposed_chiseled_copper");
        normal.add("waxed_exposed_copper_grate");
        normal.add("waxed_exposed_cut_copper");
        normal.add("waxed_exposed_cut_copper_stairs");
        normal.add("waxed_exposed_cut_copper_slab");
        normal.add("waxed_exposed_copper_bulb");
        normal.add("waxed_exposed_copper_door");
        normal.add("waxed_exposed_copper_trapdoor");
        normal.add("waxed_weathered_copper");
        normal.add("waxed_weathered_chiseled_copper");
        normal.add("waxed_weathered_copper_grate");
        normal.add("waxed_weathered_cut_copper");
        normal.add("waxed_weathered_cut_copper_stairs");
        normal.add("waxed_weathered_cut_copper_slab");
        normal.add("waxed_weathered_copper_bulb");
        normal.add("waxed_weathered_copper_door");
        normal.add("waxed_weathered_copper_trapdoor");
        normal.add("waxed_oxidized_copper");
        normal.add("waxed_oxidized_chiseled_copper");
        normal.add("waxed_oxidized_copper_grate");
        normal.add("waxed_oxidized_cut_copper");
        normal.add("waxed_oxidized_cut_copper_stairs");
        normal.add("waxed_oxidized_cut_copper_slab");
        normal.add("waxed_oxidized_copper_bulb");
        normal.add("waxed_oxidized_copper_door");
        normal.add("waxed_oxidized_copper_trapdoor");
        normal.add("red_wool");
        normal.add("orange_wool");
        normal.add("yellow_wool");
        normal.add("lime_wool");
        normal.add("green_wool");
        normal.add("light_blue_wool");
        normal.add("cyan_wool");
        normal.add("blue_wool");
        normal.add("purple_wool");
        normal.add("magenta_wool");
        normal.add("pink_wool");
        normal.add("white_wool");
        normal.add("light_gray_wool");
        normal.add("gray_wool");
        normal.add("black_wool");
        normal.add("brown_wool");
        normal.add("red_carpet");
        normal.add("orange_carpet");
        normal.add("yellow_carpet");
        normal.add("lime_carpet");
        normal.add("green_carpet");
        normal.add("light_blue_carpet");
        normal.add("cyan_carpet");
        normal.add("blue_carpet");
        normal.add("purple_carpet");
        normal.add("magenta_carpet");
        normal.add("pink_carpet");
        normal.add("white_carpet");
        normal.add("light_gray_carpet");
        normal.add("gray_carpet");
        normal.add("black_carpet");
        normal.add("brown_carpet");
        normal.add("terracotta");
        normal.add("red_terracotta");
        normal.add("orange_terracotta");
        normal.add("yellow_terracotta");
        normal.add("lime_terracotta");
        normal.add("green_terracotta");
        normal.add("light_blue_terracotta");
        normal.add("cyan_terracotta");
        normal.add("blue_terracotta");
        normal.add("purple_terracotta");
        normal.add("magenta_terracotta");
        normal.add("pink_terracotta");
        normal.add("white_terracotta");
        normal.add("light_gray_terracotta");
        normal.add("gray_terracotta");
        normal.add("black_terracotta");
        normal.add("brown_terracotta");
        normal.add("red_glazed_terracotta");
        normal.add("orange_glazed_terracotta");
        normal.add("yellow_glazed_terracotta");
        normal.add("lime_glazed_terracotta");
        normal.add("green_glazed_terracotta");
        normal.add("light_blue_glazed_terracotta");
        normal.add("cyan_glazed_terracotta");
        normal.add("blue_glazed_terracotta");
        normal.add("purple_glazed_terracotta");
        normal.add("magenta_glazed_terracotta");
        normal.add("pink_glazed_terracotta");
        normal.add("white_glazed_terracotta");
        normal.add("light_gray_glazed_terracotta");
        normal.add("gray_glazed_terracotta");
        normal.add("black_glazed_terracotta");
        normal.add("brown_glazed_terracotta");
        normal.add("red_concrete");
        normal.add("orange_concrete");
        normal.add("yellow_concrete");
        normal.add("lime_concrete");
        normal.add("green_concrete");
        normal.add("light_blue_concrete");
        normal.add("cyan_concrete");
        normal.add("blue_concrete");
        normal.add("purple_concrete");
        normal.add("magenta_concrete");
        normal.add("pink_concrete");
        normal.add("white_concrete");
        normal.add("light_gray_concrete");
        normal.add("gray_concrete");
        normal.add("black_concrete");
        normal.add("brown_concrete");
        normal.add("red_concrete_powder");
        normal.add("orange_concrete_powder");
        normal.add("yellow_concrete_powder");
        normal.add("lime_concrete_powder");
        normal.add("green_concrete_powder");
        normal.add("light_blue_concrete_powder");
        normal.add("cyan_concrete_powder");
        normal.add("blue_concrete_powder");
        normal.add("purple_concrete_powder");
        normal.add("magenta_concrete_powder");
        normal.add("pink_concrete_powder");
        normal.add("white_concrete_powder");
        normal.add("light_gray_concrete_powder");
        normal.add("gray_concrete_powder");
        normal.add("black_concrete_powder");
        normal.add("brown_concrete_powder");
        normal.add("glass");
        normal.add("tinted_glass");
        normal.add("red_stained_glass");
        normal.add("orange_stained_glass");
        normal.add("yellow_stained_glass");
        normal.add("lime_stained_glass");
        normal.add("green_stained_glass");
        normal.add("light_blue_stained_glass");
        normal.add("cyan_stained_glass");
        normal.add("blue_stained_glass");
        normal.add("purple_stained_glass");
        normal.add("magenta_stained_glass");
        normal.add("pink_stained_glass");
        normal.add("white_stained_glass");
        normal.add("light_gray_stained_glass");
        normal.add("gray_stained_glass");
        normal.add("black_stained_glass");
        normal.add("brown_stained_glass");
        normal.add("glass_pane");
        normal.add("red_stained_glass_pane");
        normal.add("orange_stained_glass_pane");
        normal.add("yellow_stained_glass_pane");
        normal.add("lime_stained_glass_pane");
        normal.add("green_stained_glass_pane");
        normal.add("light_blue_stained_glass_pane");
        normal.add("cyan_stained_glass_pane");
        normal.add("blue_stained_glass_pane");
        normal.add("purple_stained_glass_pane");
        normal.add("magenta_stained_glass_pane");
        normal.add("pink_stained_glass_pane");
        normal.add("white_stained_glass_pane");
        normal.add("light_gray_stained_glass_pane");
        normal.add("gray_stained_glass_pane");
        normal.add("black_stained_glass_pane");
        normal.add("brown_stained_glass_pane");
        normal.add("shulker_box");
        normal.add("red_shulker_box");
        normal.add("orange_shulker_box");
        normal.add("yellow_shulker_box");
        normal.add("lime_shulker_box");
        normal.add("green_shulker_box");
        normal.add("light_blue_shulker_box");
        normal.add("cyan_shulker_box");
        normal.add("blue_shulker_box");
        normal.add("purple_shulker_box");
        normal.add("magenta_shulker_box");
        normal.add("pink_shulker_box");
        normal.add("white_shulker_box");
        normal.add("light_gray_shulker_box");
        normal.add("gray_shulker_box");
        normal.add("black_shulker_box");
        normal.add("brown_shulker_box");
        normal.add("red_bed");
        normal.add("orange_bed");
        normal.add("yellow_bed");
        normal.add("lime_bed");
        normal.add("green_bed");
        normal.add("light_blue_bed");
        normal.add("cyan_bed");
        normal.add("blue_bed");
        normal.add("purple_bed");
        normal.add("magenta_bed");
        normal.add("pink_bed");
        normal.add("white_bed");
        normal.add("light_gray_bed");
        normal.add("gray_bed");
        normal.add("black_bed");
        normal.add("brown_bed");
        normal.add("candle");
        normal.add("red_candle");
        normal.add("orange_candle");
        normal.add("yellow_candle");
        normal.add("lime_candle");
        normal.add("green_candle");
        normal.add("light_blue_candle");
        normal.add("cyan_candle");
        normal.add("purple_candle");
        normal.add("magenta_candle");
        normal.add("pink_candle");
        normal.add("white_candle");
        normal.add("light_gray_candle");
        normal.add("gray_candle");
        normal.add("black_candle");
        normal.add("brown_candle");
        normal.add("red_banner");
        normal.add("orange_banner");
        normal.add("yellow_banner");
        normal.add("lime_banner");
        normal.add("green_banner");
        normal.add("light_blue_banner");
        normal.add("cyan_banner");
        normal.add("blue_banner");
        normal.add("purple_banner");
        normal.add("magenta_banner");
        normal.add("pink_banner");
        normal.add("white_banner");
        normal.add("light_gray_banner");
        normal.add("gray_banner");
        normal.add("black_banner");
        normal.add("brown_banner");
        normal.add("red_dye");
        normal.add("orange_dye");
        normal.add("yellow_dye");
        normal.add("lime_dye");
        normal.add("green_dye");
        normal.add("light_blue_dye");
        normal.add("cyan_dye");
        normal.add("blue_dye");
        normal.add("purple_dye");
        normal.add("magenta_dye");
        normal.add("pink_dye");
        normal.add("white_dye");
        normal.add("light_gray_dye");
        normal.add("gray_dye");
        normal.add("black_dye");
        normal.add("brown_dye");
        normal.add("grass_block");
        normal.add("dirt");
        normal.add("coarse_dirt");
        normal.add("rooted_dirt");
        normal.add("podzol");
        normal.add("mycelium");
        normal.add("netherrack");
        normal.add("crimson_nylium");
        normal.add("warped_nylium");
        normal.add("mud");
        normal.add("clay");
        normal.add("gravel");
        normal.add("sand");
        normal.add("red_sand");
        normal.add("soul_sand");
        normal.add("soul_soil");
        normal.add("ice");
        normal.add("packed_ice");
        normal.add("blue_ice");
        normal.add("calcite");
        normal.add("magma_block");
        normal.add("obsidian");
        normal.add("crying_obsidian");
        normal.add("bone_block");
        normal.add("glowstone");
        normal.add("snow_block");
        normal.add("snow");
        normal.add("moss_block");
        normal.add("moss_carpet");
        normal.add("pale_moss_block");
        normal.add("pale_moss_carpet");
        normal.add("pale_hanging_moss");
        normal.add("dripstone_block");
        normal.add("pointed_dripstone");
        normal.add("amethyst_block");
        normal.add("small_amethyst_bud");
        normal.add("medium_amethyst_bud");
        normal.add("large_amethyst_bud");
        normal.add("amethyst_cluster");
        normal.add("mushroom_stem");
        normal.add("brown_mushroom_block");
        normal.add("red_mushroom_block");
        normal.add("shroomlight");
        normal.add("brown_mushroom ");
        normal.add("red_mushroom ");
        normal.add("short_grass");
        normal.add("tall_grass");
        normal.add("fern");
        normal.add("large_fern");
        normal.add("dead_bush");
        normal.add("dandelion");
        normal.add("poppy");
        normal.add("blue_orchid");
        normal.add("allium");
        normal.add("azure_bluet");
        normal.add("red_tulip");
        normal.add("orange_tulip");
        normal.add("white_tulip");
        normal.add("pink_tulip");
        normal.add("oxeye_daisy");
        normal.add("cornflower");
        normal.add("lily_of_the_valley");
        normal.add("sunflower");
        normal.add("lilac");
        normal.add("rose_bush");
        normal.add("peony");
        normal.add("open_eyeblossom");
        normal.add("closed_eyeblossom");
        normal.add("torchflower");
        normal.add("pitcher_plant");
        normal.add("wither_rose");
        normal.add("azalea");
        normal.add("flowering_azalea");
        normal.add("pink_petals");
        normal.add("spore_blossom");
        normal.add("small_dripleaf");
        normal.add("big_dripleaf");
        normal.add("crimson_roots");
        normal.add("warped_roots");
        normal.add("nether_sprouts");
        normal.add("weeping_vines");
        normal.add("twisting_vines");
        normal.add("vine");
        normal.add("hanging_roots");
        normal.add("glow_lichen");
        normal.add("lily_pad");
        normal.add("seagrass");
        normal.add("sea_pickle");
        normal.add("kelp");
        normal.add("sugar_cane");
        normal.add("cactus");
        normal.add("bamboo");
        normal.add("chorus_flower");
        normal.add("wheat_seeds");
        normal.add("beetroot_seeds");
        normal.add("pumpkin_seeds");
        normal.add("melon_seeds");
        normal.add("torchflower_seeds");
        normal.add("pitcher_pod");
        normal.add("nether_wart");
        normal.add("cocoa_beans");
        normal.add("glow_berries");
        normal.add("sweet_berries");
        normal.add("turtle_egg");
        normal.add("sniffer_egg");
        normal.add("creaking_heart");
        normal.add("dried_kelp_block");
        normal.add("melon ");
        normal.add("pumpkin ");
        normal.add("carved_pumpkin");
        normal.add("jack_o_lantern");
        normal.add("hay_block");
        normal.add("tube_coral_block");
        normal.add("brain_coral_block");
        normal.add("bubble_coral_block");
        normal.add("fire_coral_block");
        normal.add("horn_coral_block");
        normal.add("tube_coral");
        normal.add("brain_coral");
        normal.add("bubble_coral");
        normal.add("fire_coral");
        normal.add("horn_coral");
        normal.add("tube_coral_fan");
        normal.add("brain_coral_fan");
        normal.add("bubble_coral_fan");
        normal.add("fire_coral_fan");
        normal.add("horn_coral_fan");
        normal.add("dead_tube_coral_block");
        normal.add("dead_brain_coral_block");
        normal.add("dead_bubble_coral_block");
        normal.add("dead_fire_coral_block");
        normal.add("dead_horn_coral_block");
        normal.add("dead_tube_coral");
        normal.add("dead_brain_coral");
        normal.add("dead_bubble_coral");
        normal.add("dead_fire_coral");
        normal.add("dead_horn_coral");
        normal.add("dead_tube_coral_fan");
        normal.add("dead_brain_coral_fan");
        normal.add("dead_bubble_coral_fan");
        normal.add("dead_fire_coral_fan");
        normal.add("dead_horn_coral_fan");
        normal.add("sponge");
        normal.add("wet_sponge");
        normal.add("sea_lantern");
        normal.add("ochre_froglight");
        normal.add("verdant_froglight");
        normal.add("pearlescent_froglight");
        normal.add("bee_nest");
        normal.add("beehive");
        normal.add("honeycomb_block");
        normal.add("honey_block");
        normal.add("slime_block");
        normal.add("cobweb");
        normal.add("sculk_vein");
        normal.add("sculk ");
        normal.add("sculk_catalyst");
        normal.add("sculk_shrieker");
        normal.add("sculk_sensor");
        normal.add("calibrated_sculk_sensor");
        normal.add("torch");
        normal.add("soul_torch");
        normal.add("redstone_torch");
        normal.add("lantern");
        normal.add("soul_lantern");
        normal.add("end_rod");
        normal.add("redstone_lamp");
        normal.add("repeater");
        normal.add("comparator");
        normal.add("target");
        normal.add("lever");
        normal.add("tripwire_hook");
        normal.add("daylight_detector");
        normal.add("piston");
        normal.add("sticky_piston");
        normal.add("dispenser");
        normal.add("dropper");
        normal.add("crafter");
        normal.add("hopper");
        normal.add("chest");
        normal.add("trapped_chest");
        normal.add("observer");
        normal.add("tnt");
        normal.add("crafting_table");
        normal.add("furnace");
        normal.add("smoker");
        normal.add("blast_furnace");
        normal.add("stonecutter");
        normal.add("grindstone");
        normal.add("cartography_table");
        normal.add("fletching_table");
        normal.add("smithing_table");
        normal.add("loom");
        normal.add("composter");
        normal.add("cauldron");
        normal.add("brewing_stand");
        normal.add("enchanting_table");
        normal.add("campfire");
        normal.add("soul_campfire");
        normal.add("anvil");
        normal.add("chipped_anvil");
        normal.add("damaged_anvil");
        normal.add("bookshelf");
        normal.add("chiseled_bookshelf");
        normal.add("lectern");
        normal.add("barrel");
        normal.add("ender_chest");
        normal.add("note_block");
        normal.add("jukebox");
        normal.add("bell");
        normal.add("beacon");
        normal.add("conduit");
        normal.add("respawn_anchor");
        normal.add("lodestone");
        normal.add("end_crystal");
        normal.add("ladder");
        normal.add("scaffolding");
        normal.add("lightning_rod");
        normal.add("flower_pot");
        normal.add("decorated_pot");
        normal.add("suspicious_sand");
        normal.add("suspicious_gravel");
        normal.add("armor_stand");
        normal.add("item_frame");
        normal.add("glow_item_frame");
        normal.add("painting");
        normal.add("rail");
        normal.add("powered_rail");
        normal.add("detector_rail");
        normal.add("activator_rail");
        normal.add("minecart");
        normal.add("hopper_minecart");
        normal.add("chest_minecart");
        normal.add("furnace_minecart");
        normal.add("tnt_minecart");
        normal.add("bucket");
        normal.add("water_bucket");
        normal.add("lava_bucket");
        normal.add("powder_snow_bucket");
        normal.add("milk_bucket");
        normal.add("cod_bucket");
        normal.add("salmon_bucket");
        normal.add("tropical_fish_bucket");
        normal.add("pufferfish_bucket");
        normal.add("axolotl_bucket");
        normal.add("tadpole_bucket");
        normal.add("coal");
        normal.add("charcoal");
        normal.add("raw_iron");
        normal.add("iron_ingot");
        normal.add("iron_nugget");
        normal.add("raw_copper");
        normal.add("copper_ingot");
        normal.add("raw_gold");
        normal.add("gold_ingot");
        normal.add("gold_nugget");
        normal.add("diamond");
        normal.add("emerald");
        normal.add("redstone");
        normal.add("lapis_lazuli");
        normal.add("quartz");
        normal.add("netherite_scrap");
        normal.add("netherite_ingot");
        normal.add("stick ");
        normal.add("flint");
        normal.add("wheat ");
        normal.add("bone");
        normal.add("bone_meal");
        normal.add("string");
        normal.add("feather");
        normal.add("leather");
        normal.add("rabbit_hide");
        normal.add("honeycomb ");
        normal.add("ink_sac");
        normal.add("glow_ink_sac");
        normal.add("turtle_scute");
        normal.add("armadillo_scute");
        normal.add("slime_ball");
        normal.add("clay_ball");
        normal.add("resin_clump");
        normal.add("prismarine_shard");
        normal.add("prismarine_crystals");
        normal.add("nautilus_shell");
        normal.add("heart_of_the_sea");
        normal.add("blaze_rod");
        normal.add("breeze_rod");
        normal.add("fire_charge");
        normal.add("wind_charge");
        normal.add("ender_pearl");
        normal.add("ender_eye");
        normal.add("heavy_core");
        normal.add("nether_star");
        normal.add("shulker_shell");
        normal.add("popped_chorus_fruit");
        normal.add("echo_shard");
        normal.add("disc_fragment_5");
        normal.add("bowl");
        normal.add("glass_bottle");
        normal.add("brick");
        normal.add("nether_brick");
        normal.add("resin_brick");
        normal.add("sugar");
        normal.add("glowstone_dust");
        normal.add("gunpowder");
        normal.add("rotten_flesh");
        normal.add("spider_eye");
        normal.add("fermented_spider_eye");
        normal.add("rabbit_foot");
        normal.add("glistering_melon_slice");
        normal.add("magma_cream");
        normal.add("ghast_tear");
        normal.add("phantom_membrane");
        normal.add("dragon_breath");
        normal.add("paper");
        normal.add("map");
        normal.add("filled_map");
        normal.add("book ");
        normal.add("writable_book");
        normal.add("written_book");
        normal.add("enchanted_book");
        normal.add("potion");
        normal.add("splash_potion");
        normal.add("lingering_potion");
        normal.add("tipped_arrow");
        normal.add("firework_rocket");
        normal.add("snowball");
        normal.add("egg");
        normal.add("experience_bottle");
        normal.add("name_tag");
        normal.add("lead");
        normal.add("saddle");
        normal.add("trial_key");
        normal.add("ominous_trial_key");
        normal.add("compass");
        normal.add("recovery_compass");
        normal.add("clock");
        normal.add("spyglass");
        normal.add("apple");
        normal.add("golden_apple");
        normal.add("enchanted_golden_apple");
        normal.add("melon_slice");
        normal.add("carrot");
        normal.add("golden_carrot");
        normal.add("potato");
        normal.add("baked_potato");
        normal.add("poisonous_potato");
        normal.add("beetroot");
        normal.add("dried_kelp");
        normal.add("beef");
        normal.add("cooked_beef");
        normal.add("porkchop");
        normal.add("cooked_porkchop");
        normal.add("mutton");
        normal.add("cooked_mutton");
        normal.add("chicken");
        normal.add("cooked_chicken");
        normal.add("rabbit");
        normal.add("cooked_rabbit");
        normal.add("cod");
        normal.add("cooked_cod");
        normal.add("salmon");
        normal.add("cooked_salmon");
        normal.add("tropical_fish ");
        normal.add("pufferfish ");
        normal.add("bread");
        normal.add("cookie");
        normal.add("pumpkin_pie");
        normal.add("cake");
        normal.add("mushroom_stew");
        normal.add("beetroot_soup");
        normal.add("rabbit_stew");
        normal.add("suspicious_stew");
        normal.add("honey_bottle");
        normal.add("ominous_bottle");
        normal.add("wooden_sword");
        normal.add("wooden_pickaxe");
        normal.add("wooden_axe");
        normal.add("wooden_shovel");
        normal.add("wooden_hoe");
        normal.add("stone_sword");
        normal.add("stone_pickaxe");
        normal.add("stone_axe");
        normal.add("stone_shovel");
        normal.add("stone_hoe");
        normal.add("iron_sword");
        normal.add("iron_pickaxe");
        normal.add("iron_axe");
        normal.add("iron_shovel");
        normal.add("iron_hoe");
        normal.add("golden_sword");
        normal.add("golden_pickaxe");
        normal.add("golden_axe");
        normal.add("golden_shovel");
        normal.add("golden_hoe");
        normal.add("diamond_sword");
        normal.add("diamond_pickaxe");
        normal.add("diamond_axe");
        normal.add("diamond_shovel");
        normal.add("diamond_hoe");
        normal.add("netherite_sword");
        normal.add("netherite_pickaxe");
        normal.add("netherite_axe");
        normal.add("netherite_shovel");
        normal.add("netherite_hoe");
        normal.add("leather_helmet");
        normal.add("leather_chestplate");
        normal.add("leather_leggings");
        normal.add("leather_boots");
        normal.add("chainmail_helmet");
        normal.add("chainmail_chestplate");
        normal.add("chainmail_leggings");
        normal.add("chainmail_boots");
        normal.add("iron_helmet");
        normal.add("iron_chestplate");
        normal.add("iron_leggings");
        normal.add("iron_boots");
        normal.add("golden_helmet");
        normal.add("golden_chestplate");
        normal.add("golden_leggings");
        normal.add("golden_boots");
        normal.add("diamond_helmet");
        normal.add("diamond_chestplate");
        normal.add("diamond_leggings");
        normal.add("diamond_boots");
        normal.add("netherite_helmet");
        normal.add("netherite_chestplate");
        normal.add("netherite_leggings");
        normal.add("netherite_boots");
        normal.add("turtle_helmet");
        normal.add("leather_horse_armor");
        normal.add("iron_horse_armor");
        normal.add("golden_horse_armor");
        normal.add("diamond_horse_armor");
        normal.add("wolf_armor");
        normal.add("shield");
        normal.add("bow");
        normal.add("crossbow");
        normal.add("arrow");
        normal.add("spectral_arrow");
        normal.add("trident");
        normal.add("mace");
        normal.add("totem_of_undying");
        normal.add("elytra");
        normal.add("flint_and_steel");
        normal.add("shears");
        normal.add("brush");
        normal.add("fishing_rod");
        normal.add("carrot_on_a_stick");
        normal.add("warped_fungus_on_a_stick");
        normal.add("mending");
        normal.add("unbreaking_3");
        normal.add("sharpness_5");
        normal.add("smite_5");
        normal.add("bane_of_arthropods_5");
        normal.add("looting_3");
        normal.add("fire_aspect_2");
        normal.add("sweeping_edge_3");
        normal.add("knockback_2");
        normal.add("efficiency_5");
        normal.add("fortune_3");
        normal.add("silk_touch");
        normal.add("protection_4");
        normal.add("fire_protection_4");
        normal.add("blast_protection_4");
        normal.add("projectile_protection_4");
        normal.add("feather_falling_4");
        normal.add("thorns_3");
        normal.add("aqua_affinity");
        normal.add("respiration_3");
        normal.add("depth_strider_3");
        normal.add("frost_walker_2");
        normal.add("soul_speed_3");
        normal.add("swift_sneak_3");
        normal.add("power_5");
        normal.add("punch_2");
        normal.add("flame");
        normal.add("infinity");
        normal.add("piercing_4");
        normal.add("multishot");
        normal.add("quick_charge_3");
        normal.add("lure_3");
        normal.add("luck_of_the_sea_3");
        normal.add("impaling_5");
        normal.add("loyalty_3");
        normal.add("riptide_3");
        normal.add("channeling");
        normal.add("density_5");
        normal.add("breach_4");
        normal.add("binding_curse");
        normal.add("vanishing_curse");
        normal.add("wind_burst_3");
        normal.add("potion_of_thick");
        normal.add("potion_of_mundane");
        normal.add("potion_of_awkward");
        normal.add("potion_of_strength");
        normal.add("potion_of_weakness");
        normal.add("potion_of_healing");
        normal.add("potion_of_harming");
        normal.add("potion_of_regeneration");
        normal.add("potion_of_poison");
        normal.add("potion_of_oozing");
        normal.add("potion_of_infested");
        normal.add("potion_of_swiftness");
        normal.add("potion_of_slowness");
        normal.add("potion_of_leaping");
        normal.add("potion_of_slow_falling");
        normal.add("potion_of_fire_resistance");
        normal.add("potion_of_invisibility");
        normal.add("potion_of_night_vision");
        normal.add("potion_of_water_breathing");
        normal.add("potion_of_turtle_master");
        normal.add("potion_of_weaving");
        normal.add("potion_of_wind_charged");
        normal.add("music_disc_13");
        normal.add("music_disc_blocks");
        normal.add("music_disc_cat");
        normal.add("music_disc_chirp");
        normal.add("music_disc_far");
        normal.add("music_disc_mall");
        normal.add("music_disc_mellohi");
        normal.add("music_disc_ward");
        normal.add("music_disc_stal");
        normal.add("music_disc_strad");
        normal.add("music_disc_wait");
        normal.add("music_disc_11");
        normal.add("music_disc_5");
        normal.add("music_disc_pigstep");
        normal.add("music_disc_otherside");
        normal.add("music_disc_relic");
        normal.add("music_disc_creator");
        normal.add("music_disc_creator_music_box");
        normal.add("music_disc_precipice");
        normal.add("field_masoned_banner_pattern");
        normal.add("bordure_indented_banner_pattern");
        normal.add("flower_banner_pattern");
        normal.add("creeper_banner_pattern");
        normal.add("skull_banner_pattern");
        normal.add("mojang_banner_pattern");
        normal.add("globe_banner_pattern");
        normal.add("piglin_banner_pattern");
        normal.add("flow_banner_pattern");
        normal.add("guster_banner_pattern");
        normal.add("ponder");
        normal.add("sing");
        normal.add("seek");
        normal.add("feel");
        normal.add("admire");
        normal.add("call");
        normal.add("yearn");
        normal.add("dream");
        normal.add("angler_pottery_sherd");
        normal.add("archer_pottery_sherd");
        normal.add("arms_up_pottery_sherd");
        normal.add("blade_pottery_sherd");
        normal.add("brewer_pottery_sherd");
        normal.add("burn_pottery_sherd");
        normal.add("danger_pottery_sherd");
        normal.add("explorer_pottery_sherd");
        normal.add("flow_pottery_sherd");
        normal.add("friend_pottery_sherd");
        normal.add("guster_pottery_sherd");
        normal.add("heart_pottery_sherd");
        normal.add("heartbreak_pottery_sherd");
        normal.add("howl_pottery_sherd");
        normal.add("miner_pottery_sherd");
        normal.add("mourner_pottery_sherd");
        normal.add("plenty_pottery_sherd");
        normal.add("prize_pottery_sherd");
        normal.add("scrape_pottery_sherd");
        normal.add("sheaf_pottery_sherd");
        normal.add("shelter_pottery_sherd");
        normal.add("skull_pottery_sherd");
        normal.add("snort_pottery_sherd");
        normal.add("netherite_upgrade_smithing_template");
        normal.add("bolt_armor_trim_smithing_template");
        normal.add("coast_armor_trim_smithing_template");
        normal.add("dune_armor_trim_smithing_template");
        normal.add("eye_armor_trim_smithing_template");
        normal.add("flow_armor_trim_smithing_template");
        normal.add("host_armor_trim_smithing_template");
        normal.add("raiser_armor_trim_smithing_template");
        normal.add("rib_armor_trim_smithing_template");
        normal.add("sentry_armor_trim_smithing_template");
        normal.add("shaper_armor_trim_smithing_template");
        normal.add("silence_armor_trim_smithing_template");
        normal.add("snout_armor_trim_smithing_template");
        normal.add("spire_armor_trim_smithing_template");
        normal.add("tide_armor_trim_smithing_template");
        normal.add("vex_armor_trim_smithing_template");
        normal.add("ward_armor_trim_smithing_template");
        normal.add("wayfinder_armor_trim_smithing_template");
        normal.add("wild_armor_trim_smithing_template");
        normal.add("zombie_head");
        normal.add("creeper_head");
        normal.add("piglin_head");
        normal.add("skeleton_skull");
        normal.add("wither_skeleton_skull");
        normal.add("dragon_head");
        normal.add("dragon_egg");
    }

    private void normal_mobs_func() {
        for (item i : total_mobs.items) {
            normal_mobs.add(i.item_name);
        }
    }
}